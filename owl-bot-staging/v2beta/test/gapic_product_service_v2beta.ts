// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as productserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v2beta.ProductServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = productserviceModule.v2beta.ProductServiceClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = productserviceModule.v2beta.ProductServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = productserviceModule.v2beta.ProductServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new productserviceModule.v2beta.ProductServiceClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new productserviceModule.v2beta.ProductServiceClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.productServiceStub, undefined);
        await client.initialize();
        assert(client.productServiceStub);
    });

    it('has close method for the initialized client', done => {
        const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.initialize();
        assert(client.productServiceStub);
        client.close().then(() => {
            done();
        });
    });

    it('has close method for the non-initialized client', done => {
        const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.productServiceStub, undefined);
        client.close().then(() => {
            done();
        });
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('createProduct', () => {
        it('invokes createProduct without error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.CreateProductRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.retail.v2beta.Product());
            client.innerApiCalls.createProduct = stubSimpleCall(expectedResponse);
            const [response] = await client.createProduct(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createProduct as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createProduct without error using callback', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.CreateProductRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.retail.v2beta.Product());
            client.innerApiCalls.createProduct = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createProduct(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.retail.v2beta.IProduct|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createProduct as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createProduct with error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.CreateProductRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createProduct = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createProduct(request), expectedError);
            assert((client.innerApiCalls.createProduct as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createProduct with closed client', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.CreateProductRequest());
            request.parent = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createProduct(request), expectedError);
        });
    });

    describe('getProduct', () => {
        it('invokes getProduct without error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.GetProductRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.retail.v2beta.Product());
            client.innerApiCalls.getProduct = stubSimpleCall(expectedResponse);
            const [response] = await client.getProduct(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getProduct as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getProduct without error using callback', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.GetProductRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.retail.v2beta.Product());
            client.innerApiCalls.getProduct = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getProduct(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.retail.v2beta.IProduct|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getProduct as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getProduct with error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.GetProductRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getProduct = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getProduct(request), expectedError);
            assert((client.innerApiCalls.getProduct as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getProduct with closed client', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.GetProductRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getProduct(request), expectedError);
        });
    });

    describe('updateProduct', () => {
        it('invokes updateProduct without error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.UpdateProductRequest());
            request.product = {};
            request.product.name = '';
            const expectedHeaderRequestParams = "product.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.retail.v2beta.Product());
            client.innerApiCalls.updateProduct = stubSimpleCall(expectedResponse);
            const [response] = await client.updateProduct(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateProduct as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateProduct without error using callback', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.UpdateProductRequest());
            request.product = {};
            request.product.name = '';
            const expectedHeaderRequestParams = "product.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.retail.v2beta.Product());
            client.innerApiCalls.updateProduct = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateProduct(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.retail.v2beta.IProduct|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateProduct as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateProduct with error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.UpdateProductRequest());
            request.product = {};
            request.product.name = '';
            const expectedHeaderRequestParams = "product.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateProduct = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateProduct(request), expectedError);
            assert((client.innerApiCalls.updateProduct as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateProduct with closed client', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.UpdateProductRequest());
            request.product = {};
            request.product.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateProduct(request), expectedError);
        });
    });

    describe('deleteProduct', () => {
        it('invokes deleteProduct without error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.DeleteProductRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteProduct = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteProduct(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteProduct as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteProduct without error using callback', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.DeleteProductRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteProduct = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteProduct(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteProduct as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteProduct with error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.DeleteProductRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteProduct = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteProduct(request), expectedError);
            assert((client.innerApiCalls.deleteProduct as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteProduct with closed client', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.DeleteProductRequest());
            request.name = '';
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteProduct(request), expectedError);
        });
    });

    describe('importProducts', () => {
        it('invokes importProducts without error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.ImportProductsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.importProducts = stubLongRunningCall(expectedResponse);
            const [operation] = await client.importProducts(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.importProducts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes importProducts without error using callback', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.ImportProductsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.importProducts = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.importProducts(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.retail.v2beta.IImportProductsResponse, protos.google.cloud.retail.v2beta.IImportMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.retail.v2beta.IImportProductsResponse, protos.google.cloud.retail.v2beta.IImportMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.importProducts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes importProducts with call error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.ImportProductsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.importProducts = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.importProducts(request), expectedError);
            assert((client.innerApiCalls.importProducts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes importProducts with LRO error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.ImportProductsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.importProducts = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.importProducts(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.importProducts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkImportProductsProgress without error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkImportProductsProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkImportProductsProgress with error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkImportProductsProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('setInventory', () => {
        it('invokes setInventory without error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.SetInventoryRequest());
            request.inventory = {};
            request.inventory.name = '';
            const expectedHeaderRequestParams = "inventory.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.setInventory = stubLongRunningCall(expectedResponse);
            const [operation] = await client.setInventory(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setInventory as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setInventory without error using callback', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.SetInventoryRequest());
            request.inventory = {};
            request.inventory.name = '';
            const expectedHeaderRequestParams = "inventory.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.setInventory = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setInventory(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.retail.v2beta.ISetInventoryResponse, protos.google.cloud.retail.v2beta.ISetInventoryMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.retail.v2beta.ISetInventoryResponse, protos.google.cloud.retail.v2beta.ISetInventoryMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.setInventory as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes setInventory with call error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.SetInventoryRequest());
            request.inventory = {};
            request.inventory.name = '';
            const expectedHeaderRequestParams = "inventory.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setInventory = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.setInventory(request), expectedError);
            assert((client.innerApiCalls.setInventory as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes setInventory with LRO error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.SetInventoryRequest());
            request.inventory = {};
            request.inventory.name = '';
            const expectedHeaderRequestParams = "inventory.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.setInventory = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.setInventory(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.setInventory as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkSetInventoryProgress without error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkSetInventoryProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkSetInventoryProgress with error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkSetInventoryProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('addFulfillmentPlaces', () => {
        it('invokes addFulfillmentPlaces without error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.AddFulfillmentPlacesRequest());
            request.product = '';
            const expectedHeaderRequestParams = "product=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.addFulfillmentPlaces = stubLongRunningCall(expectedResponse);
            const [operation] = await client.addFulfillmentPlaces(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.addFulfillmentPlaces as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes addFulfillmentPlaces without error using callback', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.AddFulfillmentPlacesRequest());
            request.product = '';
            const expectedHeaderRequestParams = "product=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.addFulfillmentPlaces = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.addFulfillmentPlaces(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.retail.v2beta.IAddFulfillmentPlacesResponse, protos.google.cloud.retail.v2beta.IAddFulfillmentPlacesMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.retail.v2beta.IAddFulfillmentPlacesResponse, protos.google.cloud.retail.v2beta.IAddFulfillmentPlacesMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.addFulfillmentPlaces as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes addFulfillmentPlaces with call error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.AddFulfillmentPlacesRequest());
            request.product = '';
            const expectedHeaderRequestParams = "product=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.addFulfillmentPlaces = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.addFulfillmentPlaces(request), expectedError);
            assert((client.innerApiCalls.addFulfillmentPlaces as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes addFulfillmentPlaces with LRO error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.AddFulfillmentPlacesRequest());
            request.product = '';
            const expectedHeaderRequestParams = "product=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.addFulfillmentPlaces = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.addFulfillmentPlaces(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.addFulfillmentPlaces as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkAddFulfillmentPlacesProgress without error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkAddFulfillmentPlacesProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkAddFulfillmentPlacesProgress with error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkAddFulfillmentPlacesProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('removeFulfillmentPlaces', () => {
        it('invokes removeFulfillmentPlaces without error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.RemoveFulfillmentPlacesRequest());
            request.product = '';
            const expectedHeaderRequestParams = "product=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.removeFulfillmentPlaces = stubLongRunningCall(expectedResponse);
            const [operation] = await client.removeFulfillmentPlaces(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.removeFulfillmentPlaces as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes removeFulfillmentPlaces without error using callback', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.RemoveFulfillmentPlacesRequest());
            request.product = '';
            const expectedHeaderRequestParams = "product=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.removeFulfillmentPlaces = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.removeFulfillmentPlaces(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.retail.v2beta.IRemoveFulfillmentPlacesResponse, protos.google.cloud.retail.v2beta.IRemoveFulfillmentPlacesMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.retail.v2beta.IRemoveFulfillmentPlacesResponse, protos.google.cloud.retail.v2beta.IRemoveFulfillmentPlacesMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.removeFulfillmentPlaces as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes removeFulfillmentPlaces with call error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.RemoveFulfillmentPlacesRequest());
            request.product = '';
            const expectedHeaderRequestParams = "product=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.removeFulfillmentPlaces = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.removeFulfillmentPlaces(request), expectedError);
            assert((client.innerApiCalls.removeFulfillmentPlaces as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes removeFulfillmentPlaces with LRO error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.RemoveFulfillmentPlacesRequest());
            request.product = '';
            const expectedHeaderRequestParams = "product=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.removeFulfillmentPlaces = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.removeFulfillmentPlaces(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.removeFulfillmentPlaces as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkRemoveFulfillmentPlacesProgress without error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkRemoveFulfillmentPlacesProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkRemoveFulfillmentPlacesProgress with error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkRemoveFulfillmentPlacesProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('addLocalInventories', () => {
        it('invokes addLocalInventories without error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.AddLocalInventoriesRequest());
            request.product = '';
            const expectedHeaderRequestParams = "product=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.addLocalInventories = stubLongRunningCall(expectedResponse);
            const [operation] = await client.addLocalInventories(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.addLocalInventories as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes addLocalInventories without error using callback', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.AddLocalInventoriesRequest());
            request.product = '';
            const expectedHeaderRequestParams = "product=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.addLocalInventories = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.addLocalInventories(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.retail.v2beta.IAddLocalInventoriesResponse, protos.google.cloud.retail.v2beta.IAddLocalInventoriesMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.retail.v2beta.IAddLocalInventoriesResponse, protos.google.cloud.retail.v2beta.IAddLocalInventoriesMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.addLocalInventories as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes addLocalInventories with call error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.AddLocalInventoriesRequest());
            request.product = '';
            const expectedHeaderRequestParams = "product=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.addLocalInventories = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.addLocalInventories(request), expectedError);
            assert((client.innerApiCalls.addLocalInventories as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes addLocalInventories with LRO error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.AddLocalInventoriesRequest());
            request.product = '';
            const expectedHeaderRequestParams = "product=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.addLocalInventories = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.addLocalInventories(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.addLocalInventories as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkAddLocalInventoriesProgress without error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkAddLocalInventoriesProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkAddLocalInventoriesProgress with error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkAddLocalInventoriesProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('removeLocalInventories', () => {
        it('invokes removeLocalInventories without error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.RemoveLocalInventoriesRequest());
            request.product = '';
            const expectedHeaderRequestParams = "product=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.removeLocalInventories = stubLongRunningCall(expectedResponse);
            const [operation] = await client.removeLocalInventories(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.removeLocalInventories as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes removeLocalInventories without error using callback', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.RemoveLocalInventoriesRequest());
            request.product = '';
            const expectedHeaderRequestParams = "product=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.removeLocalInventories = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.removeLocalInventories(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.retail.v2beta.IRemoveLocalInventoriesResponse, protos.google.cloud.retail.v2beta.IRemoveLocalInventoriesMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.retail.v2beta.IRemoveLocalInventoriesResponse, protos.google.cloud.retail.v2beta.IRemoveLocalInventoriesMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.removeLocalInventories as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes removeLocalInventories with call error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.RemoveLocalInventoriesRequest());
            request.product = '';
            const expectedHeaderRequestParams = "product=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.removeLocalInventories = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.removeLocalInventories(request), expectedError);
            assert((client.innerApiCalls.removeLocalInventories as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes removeLocalInventories with LRO error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.RemoveLocalInventoriesRequest());
            request.product = '';
            const expectedHeaderRequestParams = "product=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.removeLocalInventories = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.removeLocalInventories(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.removeLocalInventories as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkRemoveLocalInventoriesProgress without error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkRemoveLocalInventoriesProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkRemoveLocalInventoriesProgress with error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkRemoveLocalInventoriesProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listProducts', () => {
        it('invokes listProducts without error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.ListProductsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.retail.v2beta.Product()),
              generateSampleMessage(new protos.google.cloud.retail.v2beta.Product()),
              generateSampleMessage(new protos.google.cloud.retail.v2beta.Product()),
            ];
            client.innerApiCalls.listProducts = stubSimpleCall(expectedResponse);
            const [response] = await client.listProducts(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listProducts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listProducts without error using callback', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.ListProductsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.retail.v2beta.Product()),
              generateSampleMessage(new protos.google.cloud.retail.v2beta.Product()),
              generateSampleMessage(new protos.google.cloud.retail.v2beta.Product()),
            ];
            client.innerApiCalls.listProducts = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listProducts(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.retail.v2beta.IProduct[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listProducts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listProducts with error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.ListProductsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listProducts = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listProducts(request), expectedError);
            assert((client.innerApiCalls.listProducts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listProductsStream without error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.ListProductsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.retail.v2beta.Product()),
              generateSampleMessage(new protos.google.cloud.retail.v2beta.Product()),
              generateSampleMessage(new protos.google.cloud.retail.v2beta.Product()),
            ];
            client.descriptors.page.listProducts.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listProductsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.retail.v2beta.Product[] = [];
                stream.on('data', (response: protos.google.cloud.retail.v2beta.Product) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listProducts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listProducts, request));
            assert.strictEqual(
                (client.descriptors.page.listProducts.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listProductsStream with error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.ListProductsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listProducts.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listProductsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.retail.v2beta.Product[] = [];
                stream.on('data', (response: protos.google.cloud.retail.v2beta.Product) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listProducts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listProducts, request));
            assert.strictEqual(
                (client.descriptors.page.listProducts.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listProducts without error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.ListProductsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.retail.v2beta.Product()),
              generateSampleMessage(new protos.google.cloud.retail.v2beta.Product()),
              generateSampleMessage(new protos.google.cloud.retail.v2beta.Product()),
            ];
            client.descriptors.page.listProducts.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.retail.v2beta.IProduct[] = [];
            const iterable = client.listProductsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listProducts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listProducts.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listProducts with error', async () => {
            const client = new productserviceModule.v2beta.ProductServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.retail.v2beta.ListProductsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listProducts.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listProductsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.retail.v2beta.IProduct[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listProducts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listProducts.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('attributesConfig', () => {
            const fakePath = "/rendered/path/attributesConfig";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                catalog: "catalogValue",
            };
            const client = new productserviceModule.v2beta.ProductServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.attributesConfigPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.attributesConfigPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('attributesConfigPath', () => {
                const result = client.attributesConfigPath("projectValue", "locationValue", "catalogValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.attributesConfigPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromAttributesConfigName', () => {
                const result = client.matchProjectFromAttributesConfigName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.attributesConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAttributesConfigName', () => {
                const result = client.matchLocationFromAttributesConfigName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.attributesConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCatalogFromAttributesConfigName', () => {
                const result = client.matchCatalogFromAttributesConfigName(fakePath);
                assert.strictEqual(result, "catalogValue");
                assert((client.pathTemplates.attributesConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('branch', () => {
            const fakePath = "/rendered/path/branch";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                catalog: "catalogValue",
                branch: "branchValue",
            };
            const client = new productserviceModule.v2beta.ProductServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.branchPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.branchPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('branchPath', () => {
                const result = client.branchPath("projectValue", "locationValue", "catalogValue", "branchValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.branchPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromBranchName', () => {
                const result = client.matchProjectFromBranchName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.branchPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromBranchName', () => {
                const result = client.matchLocationFromBranchName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.branchPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCatalogFromBranchName', () => {
                const result = client.matchCatalogFromBranchName(fakePath);
                assert.strictEqual(result, "catalogValue");
                assert((client.pathTemplates.branchPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBranchFromBranchName', () => {
                const result = client.matchBranchFromBranchName(fakePath);
                assert.strictEqual(result, "branchValue");
                assert((client.pathTemplates.branchPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('catalog', () => {
            const fakePath = "/rendered/path/catalog";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                catalog: "catalogValue",
            };
            const client = new productserviceModule.v2beta.ProductServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.catalogPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.catalogPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('catalogPath', () => {
                const result = client.catalogPath("projectValue", "locationValue", "catalogValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.catalogPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromCatalogName', () => {
                const result = client.matchProjectFromCatalogName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.catalogPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCatalogName', () => {
                const result = client.matchLocationFromCatalogName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.catalogPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCatalogFromCatalogName', () => {
                const result = client.matchCatalogFromCatalogName(fakePath);
                assert.strictEqual(result, "catalogValue");
                assert((client.pathTemplates.catalogPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('completionConfig', () => {
            const fakePath = "/rendered/path/completionConfig";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                catalog: "catalogValue",
            };
            const client = new productserviceModule.v2beta.ProductServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.completionConfigPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.completionConfigPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('completionConfigPath', () => {
                const result = client.completionConfigPath("projectValue", "locationValue", "catalogValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.completionConfigPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromCompletionConfigName', () => {
                const result = client.matchProjectFromCompletionConfigName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.completionConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCompletionConfigName', () => {
                const result = client.matchLocationFromCompletionConfigName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.completionConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCatalogFromCompletionConfigName', () => {
                const result = client.matchCatalogFromCompletionConfigName(fakePath);
                assert.strictEqual(result, "catalogValue");
                assert((client.pathTemplates.completionConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('control', () => {
            const fakePath = "/rendered/path/control";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                catalog: "catalogValue",
                control: "controlValue",
            };
            const client = new productserviceModule.v2beta.ProductServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.controlPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.controlPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('controlPath', () => {
                const result = client.controlPath("projectValue", "locationValue", "catalogValue", "controlValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.controlPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromControlName', () => {
                const result = client.matchProjectFromControlName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.controlPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromControlName', () => {
                const result = client.matchLocationFromControlName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.controlPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCatalogFromControlName', () => {
                const result = client.matchCatalogFromControlName(fakePath);
                assert.strictEqual(result, "catalogValue");
                assert((client.pathTemplates.controlPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchControlFromControlName', () => {
                const result = client.matchControlFromControlName(fakePath);
                assert.strictEqual(result, "controlValue");
                assert((client.pathTemplates.controlPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('product', () => {
            const fakePath = "/rendered/path/product";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                catalog: "catalogValue",
                branch: "branchValue",
                product: "productValue",
            };
            const client = new productserviceModule.v2beta.ProductServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.productPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.productPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('productPath', () => {
                const result = client.productPath("projectValue", "locationValue", "catalogValue", "branchValue", "productValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.productPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProductName', () => {
                const result = client.matchProjectFromProductName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.productPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProductName', () => {
                const result = client.matchLocationFromProductName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.productPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCatalogFromProductName', () => {
                const result = client.matchCatalogFromProductName(fakePath);
                assert.strictEqual(result, "catalogValue");
                assert((client.pathTemplates.productPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBranchFromProductName', () => {
                const result = client.matchBranchFromProductName(fakePath);
                assert.strictEqual(result, "branchValue");
                assert((client.pathTemplates.productPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchProductFromProductName', () => {
                const result = client.matchProductFromProductName(fakePath);
                assert.strictEqual(result, "productValue");
                assert((client.pathTemplates.productPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('servingConfig', () => {
            const fakePath = "/rendered/path/servingConfig";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                catalog: "catalogValue",
                serving_config: "servingConfigValue",
            };
            const client = new productserviceModule.v2beta.ProductServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.servingConfigPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.servingConfigPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('servingConfigPath', () => {
                const result = client.servingConfigPath("projectValue", "locationValue", "catalogValue", "servingConfigValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.servingConfigPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromServingConfigName', () => {
                const result = client.matchProjectFromServingConfigName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.servingConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromServingConfigName', () => {
                const result = client.matchLocationFromServingConfigName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.servingConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCatalogFromServingConfigName', () => {
                const result = client.matchCatalogFromServingConfigName(fakePath);
                assert.strictEqual(result, "catalogValue");
                assert((client.pathTemplates.servingConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchServingConfigFromServingConfigName', () => {
                const result = client.matchServingConfigFromServingConfigName(fakePath);
                assert.strictEqual(result, "servingConfigValue");
                assert((client.pathTemplates.servingConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
